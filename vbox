#!/bin/bash
#
# Author: JT Wilkinson
#
# This program is free software. It comes without any warranty, to
# the extent permitted by applicable law. You can redistribute it
# and/or modify it under the terms of the Do What The Fuck You Want
# To Public License, Version 2, as published by Sam Hocevar. See
# http://sam.zoy.org/wtfpl/COPYING for more details.
#

############################ Absolute paths ############################

VBOXHEADLESS=/usr/bin/VBoxHeadless
VBOXMANAGE=/usr/bin/VBoxManage
SED=/bin/sed
GREP=/bin/grep


########################### Variables ##################################

VBOX=
HOST=localhost
PORT=
VERBOSE=
RAM=
CPUS=
BASENAME=$(basename "$0")

########################### Functions ##################################

# isRunning() - Takes one argument, the name of the Virtual Machine.  If 
# the VM is running it returns 1, else it returns 0.
isRunning() {
	VMNAME="$1"
	MATCH=$($VBOXMANAGE -q list runningvms | $SED 's/"\(.*\)".*/\1/' | $GREP ^${VMNAME}$)
	if [ $MATCH ]; then
		return 1
	else
		return 0
	fi
}

# startVM() - takes 4 arguments, VBOX name, HOST name, Port number,
# and VERBOSE in that order
startVM() {
	VBOX="$1"
	HOST="$2"
	PORT="$3"
	VERBOSE="$4"
	
	#if [ $VERBOSE -eq 1  ]; then
		#SUPPRESS=""
	#else
		#SUPPRESS=
	#fi
	
	if [ -n "$VBOX" ]; then
		isRunning "$VBOX"
		RUNNING=$?
		if [ $RUNNING -eq 1 ]; then
			echo "$VBOX is already running" >&2
			return 0
		else
			if [ -n "$PORT" ]; then
				$VBOXHEADLESS -startvm "$VBOX" --vrdp=on \
					--vrdpport $PORT --vrdpaddress $HOST & 
				disown
			else					
				$VBOXHEADLESS -startvm "$VBOX" --vrdp=off &
				disown
			fi
			return 1
		fi
	else
		echo "No virtual machine specified" >&2
		return 0
	fi
}

# isValidVM() - Takes one argument, the name of the Virtual Machine.  If 
# the VM is registered with VirtualBox it returns 1, else it returns 0.
isValidVM() {
	VMNAME="$1"
	MATCH=$($VBOXMANAGE -q list vms | $SED 's/"\(.*\)".*/\1/' | $GREP ^${VMNAME}$)
	if [ $MATCH ]; then
		return 1
	else
		return 0
	fi
}

# isValidPort() - Takes one argument, a port number.  It returns 1 if the
# port is valid for a VRDP server and 0 otherwise.
isValidPort() {
	PORT="$1"
	
	if [ $PORT -lt 1024 ] || [ $PORT -gt 65535 ]; then
		echo "$PORT is not a valid port" >&2
		echo "Choose an unused port between 1024 and 65535" >&2
		return 0
	elif [ "$(lsof -n -i:$PORT -P)" ]; then
		echo "$PORT is in use" >&2
		echo "Choose an unused port between 1024 and 65535" >&2
		return 0
	else
		return 1
	fi
}

setRam() {
	VBOX="$1"
	RAM="$2"
	
	if [ "$VBOX" ] && [ "$RAM" ]; then
		echo "Attempting to set RAM of $VBOX to $RAM"  >&2
		isRunning "$VBOX"
		if [ "$?" -eq 0 ]; then
			echo "Setting RAM of $VBOX to $RAM"
			$VBOXMANAGE -q modifyvm "$VBOX" --memory "$RAM"
		else
			echo "Cannot modify RAM of a running VM"  >&2
			return 0
		fi
	else
		echo "Must specify a powered down VM and a RAM amount"  >&2
		return 0
	fi
}

setCPUs() {
	VBOX="$1"
	CPUS="$2"
	
	if [ "$VBOX" ] && [ "$CPUS" ]; then
		echo "Attempting to set CPUS of $VBOX to $CPUS"  >&2
		isRunning "$VBOX"
		if [ "$?" -eq 0 ]; then
			echo "Setting CPUS of $VBOX to $CPUS"
			$VBOXMANAGE -q modifyvm "$VBOX" --cpus "$CPUS"
		else
			echo "Cannot modify CPUS of a running VM"  >&2
			exit 1
		fi
	else
		echo "Must specify a powered down VM and number of CPUS"  >&2
		exit 1
	fi
}

setVRDP() {
	echo "To fill in"
}

usage() {
	echo "usage: $BASENAME [OPTIONS] VM_NAME COMMAND"  >&2
}

######################### Main #########################################

# Check if any arguments were supplied and exit if not
if [ $# -eq 0 ]; then
	usage
	exit 1
fi

# Parse the command line flags and options
OPTS=$(getopt -o h:p: --long host:,port:,verbose,help -n 'vbox' -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
eval set -- "$OPTS"

# Process the flags
while [ "$1" != "--" ]
do
	case "$1" in
		-h|--host)
			echo "Using host $2"
			HOST="$2"
			shift 2
			;;
		-p|--port)
			PORT="$2"
			isValidPort $PORT 
			if [ $? -eq 0 ]; then
				echo "$PORT is not a valid port" >&2
				echo "Choose an unused port between 1024 and 65535" >&2
				exit 1
			fi
			shift 2
			;;
		-v|--verbose)
			VERBOSE=1
			shift
			;;
		--help)
			echo "Read the script dummy" >&2
			exit 0
			;;	
		--)
			echo "This shouldn't get printed!!!!" >&2
			shift
			;;
		*)
			echo "usage: $0 [OPTION] COMMAND" >&2
			exit 1
	esac
done

# Move past the -- at the end of the flags
shift

if [ "$1" != "" ]; then
	# Check if this VM is registered with VirtualBox
	isValidVM "$1"
	if [ $? -eq 1 ]; then
		VBOX="$1"
		shift
		
		case "$1" in
			start)
				startVM $VBOX $HOST $PORT $VERBOSE
				if [ $? == 0 ]; then
					exit 1
				else
					exit 0
				fi
				;;
			poweroff)
				$VBOXMANAGE -q controlvm "$VBOX" poweroff
				exit $?
				;;
			reset)
				$VBOXMANAGE -q controlvm "$VBOX" reset
				exit $?
				;;
			pause)
				echo "Use the resume command to unpause the machine"
				$VBOXMANAGE -q controlvm "$VBOX" pause
				exit $?
				;;
			resume)
				if [ -n "$VBOX" ]; then
					echo "Resuming $VBOX"
					$VBOXMANAGE -q controlvm "$VBOX" resume
					exit $?
				else
					echo "Must specify a VM to resume" >&2
					exit 1
				fi
				;;
			save)
				echo "Use the start command to resume from the saved state"
				$VBOXMANAGE -q controlvm "$VBOX" savestate
				exit $?
				;;
			status)
				echo "Host: $VBOX @ $HOST:$PORT"
				echo "Status: $($VBOXMANAGE showvminfo $VBOX | $GREP State | cut -d" " -f12-)"
				exit 0
				;;
			show)
				if [ -n "$VBOX" ]; then
					echo "Showing $VBOX"
					$VBOXMANAGE -q showvminfo "$VBOX"
				else
					echo "Must specify a VM to show" >&2
					exit 1
				fi
				shift
				;;
			setram)
				RAM="$2"
				setRam "$VBOX" "$RAM"
				if [ $? -eq 0 ]; then
					exit 1
				else
					exit 0
				fi
				;;
			setcpus)
				CPUS="$2"
				setCPUs "$VBOX" "$CPUS"
				if [ $? -eq 0 ]; then
					exit 1
				else
					exit 0
				fi
				;;
			running)
				isRunning "$VBOX"
				if [ "$?" -eq 1 ]; then
					echo "$VBOX is running"
				else
					echo "$VBOX is not running"
				fi
				shift
				;;
			*)
				echo "Must specify a valid command to perform on $VBOX"
				usage
				exit 1
		esac
	else # Process command not related to a specific vbox
		case "$1" in
			list)
				if [ $VERBOSE ]; then
					$VBOXMANAGE -q list vms 
				else
					$VBOXMANAGE -q list vms | $SED 's/"\(.*\)".*/\1/'
				fi
				shift
				;;
			listrunning)
				if [ $VERBOSE ]; then
					$VBOXMANAGE -q list runningvms 
				else
					$VBOXMANAGE -q list runningvms | $SED 's/"\(.*\)".*/\1/'
				fi
				shift
				;;
			*)
				echo "$1 not a valid VM name or command"
				usage
				exit 1
		esac
	fi
fi

# Finished without errors
exit 0

